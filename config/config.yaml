defaults:
   - _self_
   - dataset: cityscapes

name: PSPNet
n_gpu: 1
use_synch_bn: False
crop_size: 400
mean: [0.28689529, 0.32513294, 0.28389176]
std: [0.17613647, 0.18099176, 0.17772235]
threshold_value: 0.5

train_transforms:
  - _target_: albumentations.SmallestMaxSize
    max_size: ${crop_size}
  - _target_: albumentations.RandomCrop
    height: ${crop_size}
    width: ${crop_size}
  - _target_: albumentations.AdvancedBlur
    p: 0.75
  - _target_: albumentations.GaussNoise
    p: 0.75
  - _target_: albumentations.HorizontalFlip
    p: 0.5
  - _target_: albumentations.CLAHE
    p: 0.75
  - _target_: albumentations.RandomBrightnessContrast
    p: 0.75
  - _target_: albumentations.RandomGamma
    p: 0.75
  - _target_: albumentations.ColorJitter
    p: 0.75
  - _target_: albumentations.Normalize
    mean: ${mean}
    std: ${std}
  - _target_: albumentations.pytorch.ToTensorV2
    transpose_mask: True

val_transforms:
  - _target_: albumentations.SmallestMaxSize
    max_size: ${crop_size}
  - _target_: albumentations.RandomCrop
    height: ${crop_size}
    width: ${crop_size}
  - _target_: albumentations.Normalize
    mean: ${mean}
    std: ${std}
  - _target_: albumentations.pytorch.ToTensorV2
    transpose_mask: True

train_loader:
  _target_: torch.utils.data.DataLoader
  dataset:
    _target_: src.dataloaders.CityscapesDataset
    root: ${dataset.data_dir}
    split: train
    transforms:
      _target_: albumentations.Compose
      transforms: ${train_transforms}
    id_to_train_id: ${dataset.id_to_train_id}
    load_limit: 32
  shuffle: True
  batch_size: 8
  num_workers: 0

val_loader:
  _target_: torch.utils.data.DataLoader
  dataset:
    _target_: src.dataloaders.CityscapesDataset
    root: ${dataset.data_dir}
    split: val
    transforms:
      _target_: albumentations.Compose
      transforms: ${val_transforms}
    id_to_train_id: ${dataset.id_to_train_id}
    load_limit: 32
  batch_size: 8
  num_workers: 0

model:
  _target_: src.models.PSPNet
#  backbone: resnet50
#  pretrained: True
  freeze_bn: False
  freeze_backbone: True

differential_lr: True

loss:
  _target_: src.utils.DiceCrossEntropyLoss
  weight: 0.15

metric:
  _target_: src.utils.PixAccIoUMetric
  reduction: macro
  threshold_value: ${threshold_value}

#optimizer:
#  _target_: torch.optim.SGD
#  lr: 0.01
#  weight_decay: 1e-4
#  momentum: 0.9

optimizer:
  _target_: torch.optim.AdamW
  lr: 0.001
  weight_decay: 1e-4
  eps: 1e-08

visualizer:
  _target_: src.utils.Visualization
  palette: ${dataset.palette}
  threshold_value: ${threshold_value}

trainer:
  epochs: 80
  save_dir: saved\
  save_period: 1
  monitor: max mIoU
  early_stop: 10
  tensorboard: True
  log_dir: saved/runs
  log_per_iter: 20
  val: True
  val_per_epochs: 5

resume:
